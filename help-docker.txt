++++
# Buildkit will hide away much of its progress which is something the legacy builder did not do.
# To see this output, you will want to pass the progress flag to the build command:
#
docker build --progress=plain .

# Additionally, you can pass the no-cache flag to disable any caching:
#
docker build --no-cache --progress=plain .

To disable Buildkit, you can just pass the following variable to the build command:

DOCKER_BUILDKIT=0 docker build .

If you want to learn more about features Buildkit has to offer, please check out the following pages:

https://docs.docker.com/develop/develop-images/build_enhancements/

https://docs.docker.com/engine/reference/commandline/build/#specifying-external-cache-sources

https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/
++++

Docker
------
Apache 2.0 open-source license.

Docker editions:
- Engine community
- Engine enterprise
- Enterprise with full management support

Linux command "ps aux" lists all processes (incl. docker containers)

Docker client-server architecture:
- Client using CLI
- Server, Docker daemon

Docker also supports a REST API
Docker daemon manages containers, images, networks and volumes.

Docker registry:
- Public: Docker Hub (https://hub.docker.com),
- Self-hosted: Harbor or GitLab Container Registry

Docker uses Union File System (unionFS) to layer Docker images.
- unionFS allows files and directories of separate file systems, known as branches, to be transparently overlaid, forming a single coherent file system.
- Layers or intermediate images.
- Image can start with a blank layer called scratch (base image).
- Image can take an existing parent image as base.


Dockerfile example:

	FROM 	ubuntu:18.04
	COPY 	. /app 					<<< Copies from host to container location.
	RUN 	make /app
	CMD 	python /app/app.py


Dockerfile example:

	FROM 	python:3.7
	ENV 	MESSAGE HELLO-WORLD

	COPY 	. /app
	WORKDIR /app

	RUN 	pip install -r requirements.txt
	EXPOSE 	7777

	ENTRYPOINT	["python3"]			<< This is the command
	CMD 		["myApp.py"]		<< This is the argument


Dockerfile example:

	FROM 	python:3.7
	ENV 	MESSAGE HELLO-WORLD

	COPY 	. /app
	WORKDIR /app

	RUN 	pip install -r requirements.txt
	EXPOSE 	7777

	CMD 	python3 myApp.py


Dockerfile example:

	FROM ubuntu
	RUN apt-get update
	RUN apt-get -y install python
	EXPOSE 8000
	ENTRYPOINT ["python", "-m", "SimpleHTTPServer", "8000"]


FROM 		Creates a layer from the ubuntu:18.04 Docker image.
COPY 		Adds files from your Docker clientâ€™s current directory.
RUN 		Builds your application with make.
CMD 		Specifies what command to run within the container.
			The command the container will run by default when instantiated.

WORKDIR		Changes working directory for any consecutive commands.
EXPOSE 		Exposed port (only for documentation; must use --publish)
ENV 		Environment variables (key value)

ENTRYPOINT 	Like CMD, the ENTRYPOINT command runs a program, but it also does
			something else: it enables us to pass arguments to the program.   << !!


If you don't use RUN either ENTRYPOINT or CMD must be defined.
Two modes: shell and exec.
Exec format: Arguments are inside square brackets.

Exec mode is preferred. It starts the specified command process as PID 1.
Ensures that Unix signals sent to the container are sent to your spawned process.


Dockerfile, ENTRYPOINT vs CMD: 		https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/
Docker RUN vs CMD vs ENTRYPOINT:	https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/

# Check docker is installed/running correctly
docker version
docker info
docker run hello-world


# Build an image from the dockerfile
#
docker build -t <image-tag> .
docker build -t <image-tag> -f <path to Dockerfile>

# Push image to registry
#
docker push <image-tag>



# Create and run a container (fetches image automatically, if needed)
#
# docker run -dit --name <name container> -p <host port>:<container port> <image:version>
#
# 	-d (--detach)		detached mode (in background)
# 	-i (--interactive)	interactive session
# 	-t (--tty)			standard input terminal
# 	-p (--publish) 		Publish a port outside the container
#	--name 				Optional name of container
#

# Run busybox:
# docker run busybox <overwrites the default command>
#
docker run busybox echo hello, world
docker run busybox pwd
docker run busybox ping 8.8.8.8

# Run Ubuntu container with bash
docker run -it ubuntu /bin/bash

# Run redis container; jump into redis-cli
docker run redis
docker exec -it <container id> redis-cli
    # redis-cli commands
    127.0.0.1:6379> set myvalue 5
    OK
    127.0.0.1:6379> get myvalue
    "5"

# Run redis container; jump into shell or bash
docker run redis
docker exec -it <container id> sh
    # shell commands
    cd /
    ls
    redis-cli
docker exec -it <container id> bash


# Run Apache httpd web server
#
docker run -dit -p 8080:80 httpd
docker run -dit -p 8080:80 httpd:2.4

# Run Apache httpd web server
#
docker run -dit --name MyApacheWeb -p 8080:80 httpd:2.4


# Instead of running Apache httpd web server
# jump into the bash shell (for example for troubleshooting).
#
# You now need to start the container manually from the bash shell...
# Can be used to run one-off containers with diagnostic or maintenance commands...
# Containers stops when you exit bash shell...
#
docker run -dit --name MyApacheWeb -p 8080:80 httpd:2.4 bash


# Access the bash shell after starting the container.
#
docker run -dit --name MyApacheWeb -p 8080:80 httpd:2.4 bash
docker exec -it <containerid> bash


# List running containers:
#
docker ps
docker container ls

# List all containers that are running or have run:
#
docker ps -a
docker ps --all
docker container ls -a


# Inspect a container, for example to find out container's IP address
docker inspect <container ID>.


# Check logs of container
#
docker logs <container id>
docker logs -f <container id>

# Remove stopped containers, docker cache, etc.:
#
docker system prune



# Fetch image explicitly from registry
#
# docker pull [OPTIONS] NAME[:TAG|@DIGEST]
#
docker pull debian
docker pull debian:jessie


# Check which images are present locally
#
docker images
docker image ls

# Remove image
docker rmi <image>




#  Create a container without starting it
#
docker create hello-world

# Create and start a container.
#
docker create hello-world
docker start -a <container reference>

# Restart a stopped container.
# First three characters of id suffice.
#
docker start <container id>

# Restart a stopped container; attach to STDOUT/STDERR.
#
docker start -a <container id>


# Stop a running container (SIGTERM)
# Graceful shutdown, but kill after 10 seconds.
docker stop <container id>

# Kill a running container (SIGKILL)
docker kill <container id>


# Remove a container
#
docker rm <container id>


# Help
#
docker --help.


# Leaving container bash/shell
exit or ctrl P+Q


# Stopping and removing all running containers
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)

# Remove all images
docker rmi $(docker images -q)


# New docker syntax available:
# docker container run
# docker image build



Example Create Image on Dockerhub
---------------------------------
export your_docker_id=tisipi
export your_app_name=cow_app

myapp.sh:
	#! /bin/bash
	echo "I am a cow!" | /usr/games/cowsay | /usr/games/lolcat -f

chmod +x myapp.sh

Dockerfile:
	FROM ubuntu
	RUN apt-get update && apt-get install -y cowsay lolcat && rm -rf /var/lib/apt/lists/*
	COPY myapp.sh /myapp/myapp.sh
	CMD ["/myapp/myapp.sh"]

docker build -t $your_docker_id/$your_app_name .
docker run --rm $your_docker_id/$your_app_name


# Display the R/O layers created for each command in the Dockerfile:
docker history $your_docker_id/$your_app_name | head -n 4

docker login
docker push $your_docker_id/$your_app_name

	WARNING! Your password will be stored unencrypted in /home/eric/.docker/config.json.
	Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store

# Remove login credentials
cat /home/eric/.docker/config.json
docker logout

docker images
docker rmi $your_docker_id/$your_app_name

docker run --rm $your_docker_id/$your_app_name



Docker networking
-----------------
Network drivers:
- Bridge (default)
- Host
- Overlay
- Macvlan
- None

Built-in DNS resolution:
- Default bridge network: Container can only access other container by IP addres.
- Custom bridge network: Automatic DNS resolution between containers.

Containers connected to default bridge network, can not speak to external hosts.
To enable forwarding:
1. Allow IP forwarding on host:
   	sysctl net.ipv4.conf.all.forwarding=1
2. Update iptables FORWARD policy to ACCEPT traffic:
   	iptables -P FORWARD ACCEPT



# List Docker networks
#
docker network ls


# Create a container network
#
# docker network create [OPTIONS] NETWORK
#
docker network create my-bridge-network
docker network create -d bridge my-bridge-network

docker network create --driver=bridge --subnet=192.168.0.0/16 br0

docker network create \
  --driver=bridge \
  --subnet=172.28.0.0/16 \
  --ip-range=172.28.5.0/24 \
  --gateway=172.28.5.254 \
  br0


docker network create -d overlay my-multihost-network

docker network create -d overlay \
  --subnet=192.168.10.0/25 \
  --subnet=192.168.20.0/25 \
  --gateway=192.168.10.100 \
  --gateway=192.168.20.100 \
  --aux-address="my-router=192.168.10.5" --aux-address="my-switch=192.168.10.6" \
  --aux-address="my-printer=192.168.20.5" --aux-address="my-nas=192.168.20.6" \
  my-multihost-network


# Attach container to a network upon creation
#
docker run -it -p 5000:5000 --network multi-host-network container1


# Connect a container to a network
#
# docker network connect [OPTIONS] NETWORK CONTAINER
# docker network connect [OPTIONS] <net-id> <container-id>
#
docker network connect multi-host-network container1
docker network connect --ip 10.10.36.122 multi-host-network container2


# Disconnect a container from a network
#
# docker network disconnect [OPTIONS] NETWORK CONTAINER
# docker network disconnect [OPTIONS] <net-id> <container-id>
#
docker network disconnect multi-host-network container1


Persistent Data
---------------
Restarting a container: Filesystem data is not lost
Remove a container:		Filesystem data is lost

Persist data with:
- Volume: 		Location outside of container union FS: /var/lib/docker/volumes
				Not accessible to non-Docker processes.
- Bind mount:	Any location on host. Accessible to non-Docker processes.
- tmpfs mount:	System memory on host.

Volumes are the best way.
A volume can be mounted into multiple containers simultaneously.


# List the volumes
#
docker volume ls

# Inspect a volume
#
docker volume inspect <volume name>


# Create a volume
#
# docker volume create [OPTIONS] [VOLUME]
#
docker volume create <name volume>


# Create a volume when starting the container
#
# volume:						my-volume
# maps host local path 			/var/lib/docker/volumes/my-volume/
# into the container at 	 	/var/lib/app-data
# container:					my-app
#
docker run -d -v my-volume:/var/lib/app-data my-app


# Bind mount can only be specified with the docker run command.
# The path always starts with the forward slash (/)
#
docker run -d -v /home/cisco/app-folder:/var/lib/app-data my-app


Docker Exercise
---------------
app/main.py:

	from flask import Flask

	app = Flask(__name__)

	@app.route('/')
	def home():
	    out = (
	        f'Welcome My Friend.<br>'
	    )
	    return out

	if __name__ == '__main__':
	    app.run(debug=True, host='0.0.0.0')


Access the application:
	http://localhost:5000


app/requirements.txt:

 Flask==1.1.1


app/Dockerfile:

	FROM python:3.7

	COPY . /app
	WORKDIR /app

	RUN pip install -r requirements.txt
	EXPOSE 5000

	CMD ["python3", "main.py"]

Build the container:
	docker build -t app .

Start the container:
	docker run -it -p 5000:5000 app


lb/nginx.conf:

	events {}
	http {

	  upstream myapp {
	    server 172.20.0.100:5000;
	    server 172.20.0.101:5000;
	  }

	  server {
	    listen 8080;
	    server_name localhost;

	    location / {
	      proxy_pass http://myapp;
	      proxy_set_header Host $host;
	    }
	  }

	}


lb/Dockerfile:

	FROM nginx

	COPY nginx.conf /etc/nginx/nginx.conf

	EXPOSE 8080

	CMD ["nginx", "-g", "daemon off;"]


Build the container:
	docker build -t lb .


app/main.py:

	from flask import Flask
	import socket

	ip = socket.gethostbyname(socket.gethostname())

	app = Flask(__name__)

	@app.route('/')
	def home():
	    out = (
	        f'Welcome My Dear Friends.<br>'
	        f'IP address of the server is {ip}.<br><br>'
	    )
	    return out

	if __name__ == '__main__':
	    app.run(debug=True, host='0.0.0.0')


Create and inspect docker network appnet:
	docker network create --subnet=172.20.0.0/24 --gateway=172.20.0.1 appnet
	docker network inspect appnet

Run the app container on the appnet network with .100 IP address:
	docker run --net appnet --ip 172.20.0.100 -it -d -p 5000:5000 app

Start the lb container on the appnet network with .10 IP address:
	docker run --net appnet --ip 172.20.0.10 -it -d -p 8080:8080 lb

Access the application via the LB:
	http://localhost:8080



Docker Compose
--------------
The docker-compose tool defines and runs Docker applications.

docker-compose version
docker-compose up


docker-compose.yml:

	version: '2'
	services:
	  myhero-data:
	    build: .
	    image: juliocisco/myhero-data
	    ports:
	     - "15000:5000" 					<<< HOST:CONTAINER ports
	    volumes:
	     - .:/app/data
	    environment:
	     -  myhero_data_key=${MYHERO_DATA_KEY}
	     -  myhero_data_dir=/app/data/


Remark port syntax:
	Above is the short syntax. If only one port is specified it concerns the container port only
	The long form syntax allows the configuration of additional fields.

	ports:
	  - target: 80
	    published: 8080
	    protocol: tcp
	    mode: host

	target: 	the port inside the container
	published: 	the publicly exposed port


Dockerfile:

	FROM alpine:3.11
	EXPOSE 5000
	MAINTAINER Julio Gomez "jgomez2@cisco.com"

	VOLUME ["/app/data"]

	# Install python, pip and basic utilities
	RUN apk add -U \
	        python \
	        py-pip \
	        ca-certificates \
	  && rm -rf /var/cache/apk/* \
	  && pip install --no-cache-dir \
	          setuptools \
	          wheel

	# This is failing for some odd pip upgrade error commenting out for now
	#RUN pip install --upgrade pip

	ADD . /app
	WORKDIR /app
	RUN pip install --requirement ./requirements.txt

	CMD [ "python", "./myhero_data/myhero_data.py" ]


