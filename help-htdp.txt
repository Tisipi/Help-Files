How to Design Programs, Second Edition
--------------------------------------
https://htdp.org/2020-8-1/Book/index.html


Dr. Racket
----------
https://docs.racket-lang.org/index.html

cd /usr/racket/bin/
./drracket


Beginning Student Language (BSL)
--------------------------------

; This is a comment

; Arithmetic
;
(+ 2 2)
(* 3 3)
(- 4 2)
(/ 6 2)

(sqr 3)
(sqrt 9)
(expt 2 3)
(sin 0)
(cos pi)


; Strings (index starts with 0)
;
"hello world"
(string-length "hello")
(string-append "hello" "-" "world")
(string-ith "hello" 0)

(string-upcase "cat")
(string-downcase "CAT")
(substring "hello world" 1 5)
(substring "hello world" 4)

(string-numeric? "123")
(string? "hello world")
(string? 42)

(string=? "bye" "bye")
(string<? "hello" "world")
(string>=? "world" "hello")

(string->number "42")


; Booleans and expressions
;
#true
#false
(and #true #false)
(or #true #false)
(not #false)
(> 10 9)
(< -1 0)
(= 42 9)


; Images
;
(require 2htdp/image)
(image-width ...)
(image-height ... )

(circle 10 "solid" "red")
(circle 10 "outline" "red")
(ellipse 30 60 "solid" "blue")
(ellipse 60 30 "outline" "blue")
(rectangle 30 20 "outline" "blue")
(triangle 40 "solid" "tan")


;line segment that connects the points (0,0) to (x1,y1).
(line 30 0 "yellow")
(line 0 30 "red")


(text "Hello" 24 "white")
(text "Hello and\nGoodbye" 24 "red")


(empty-scene 100 60)


; Remark: It seems if overlay works now the other way round....
;
(overlay
  (rectangle 20 20 "solid" "blue")
  (circle 5 "solid" "red"))

(overlay/xy (rectangle 20 20 "solid" "white")
            10 10
            (rectangle 20 20 "solid" "red"))


(overlay/align "left" "middle"
               (rectangle 30 60 "solid" "orange")
               (ellipse 60 30 "solid" "purple"))

(overlay/align "right" "bottom"
               (rectangle 20 20 "solid" "silver")
               (rectangle 30 30 "solid" "seagreen")
               (rectangle 40 40 "solid" "silver")
               (rectangle 50 50 "solid" "seagreen"))

(beside/align "bottom"
              (ellipse 20 70 "solid" "lightsteelblue")
              (ellipse 20 50 "solid" "mediumslateblue")
              (ellipse 20 30 "solid" "slateblue")
              (ellipse 20 10 "solid" "navy"))

(above (ellipse 70 20 "solid" "gray")
       (ellipse 50 20 "solid" "darkgray")
       (ellipse 30 20 "solid" "dimgray")
       (ellipse 10 20 "solid" "black"))


; origin (0,0) is in the upper-left corner
; y-coordinate is measured downward
;
(place-image
    (circle 5 "solid" "blue")
    50 80
    (empty-scene 100 100))



; Constants
;
(define VELOCITY 3)


; Function definition and application
;
(define (distance x y) (sqrt (+ (sqr x) (sqr y))))
(distance 3 4)


; Condition
;
; if-then-else construct
;
(if (= x 0) 0 (/ 1 x))


(define (sign x)
  (cond
    [(> x 0) 1]
    [(= x 0) 0]
    [(< x 0) -1]))



; Flying/landing UFO
;
(define UFO (overlay (circle 10 "solid" "blue")
                     (rectangle 40 6 "solid" "blue")))
(define MY-GRAPHIC UFO)
(define VELOCITY 3)
(define (distance t) (* VELOCITY t))
(define WIDTH 100)
(define HEIGHT 150)
(define POSITION (/ WIDTH 2))
(define EMPTY-SCENE (empty-scene WIDTH HEIGHT))
(define IMAGE-CENTER-TO-TOP (- HEIGHT (/ (image-height UFO) 2)))

(define (picture-of-ufo.v2 t)
  (cond
    [(<= (distance t) IMAGE-CENTER-TO-TOP)
     (place-image MY-GRAPHIC POSITION (distance t) EMPTY-SCENE)]
    [(> (distance t) IMAGE-CENTER-TO-TOP)
     (place-image MY-GRAPHIC POSITION IMAGE-CENTER-TO-TOP EMPTY-SCENE)]
))

(require 2htdp/universe)
(animate picture-of-ufo.v2)