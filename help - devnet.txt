Certification350-901 DEVCOR
Developing Applications using Cisco Core Platforms and APIs v1.0 (350-901)
Developing Applications using Cisco Core Platforms and APIs v1.0 (DEVCOR 350-901) is a 120-minute exam associated with the DevNet Professional Certification. This exam tests a candidate's knowledge of software development and design including using APIs, Cisco platforms, application deployment and security, and infrastructure and automation. The course, Developing Applications using Cisco Core Platforms and APIs helps candidates to prepare for this exam.


Exam overview
1.0 Software Development and Design
1.1 Describe distributed applications related to the concepts of front-end, back-end, and load balancing
1.2 Evaluate an application design considering scalability and modularity
1.3 Evaluate an application design considering high-availability and resiliency (including on-premises, hybrid, and cloud)
1.4 Evaluate an application design considering latency and rate limiting
1.5 Evaluate an application design and implementation considering maintainability
1.6 Evaluate an application design and implementation considering observability
1.7 Diagnose problems with an application given logs related to an event
1.8 Evaluate choice of database types with respect to application requirements (such as relational, document, graph, columnar, and Time Series)
1.9 Explain architectural patterns (monolithic, services oriented, microservices, and event driven)
1.10 Utilize advanced version control operations with Git
1.10.a Merge a branch
1.10.b Resolve conflicts
1.10.c git reset
1.10.d git checkout
1.10.e git revert
1.11 Explain the concepts of release packaging and dependency management
1.12 Construct a sequence diagram that includes API calls

Study Material
Setting up your Linux (Ubuntu) workstation as a development environment
Setting up your Windows workstation as a development environment
Setting up your macOS workstation as a development environment
What is a Development Environment and why do you need one?
A brief introduction to Git
Intro to Python Part 1
Intro to Python Part 2
Coding 202: Parsing JSON using Python
Introduction to XML
Introduction to the Guest Shell
Chat-Ops with Webex Teams and Python
Firepower Management Center (FMC) REST API token-based authentication
Exploring the 'webexteamssdk' Webex Teams Python Library
Git 100: Basics of the git version control system
Git 101: Branching
Git 102: Using git with servers
Introduction to Webex Teams Apps
Modern Application Development
Modern Application Development
Understanding the OAuth Flow of a Webex Teams Integration
Webex Teams Security and Access: Tokens, OAuth, Scopes, and Roles


Exam overview
2.0 Using APIs
2.1 Implement robust REST API error handling for time outs and rate limits
2.2 Implement control flow of consumer code for unrecoverable REST API errors
2.3 Identify ways to optimize API usage through HTTP cache controls
2.4 Construct an application that consumes a REST API that supports pagination
2.5 Describe the steps in the OAuth2 three-legged authorization code grant flow

Study Material
What is REST? What are APIs
Intro to Coding and APIs
Getting started with REST APIs
Hands On: Use Postman to interact with REST APIs
Prime Infrastructure API 101: REST Basics
Invoke Webex REST APIs from the interactive documentation
Building Python Requests to Read and Create Webex Teams API Items
Introduction to XML
Introductory UCS Director REST API, Custom Tasks and Workflow Creation Part I
Meraki Dashboard API Using Postman
Meraki Location Scanning API Python
Run a Webex Teams Bot Locally


Exam overview
3.0 Cisco Platforms
3.1 Construct API requests to implement chatops with Webex Teams API
3.2 Construct API requests to create and delete objects using Firepower device management (FDM)
3.3 Construct API requests using the Meraki platform to accomplish these tasks
3.3.a Use Meraki Dashboard APIs to enable an SSID
3.3.b Use Meraki location APIs to retrieve location data

Study Material
Exploring Firepower Management Center (FMC) REST APIs
Introduction to Meraki Integrations
Introduction to Cisco DNA Center Northbound APIs
Cisco DNA Center API Overview
Cisco DNA Center Northbound API Modules
What and Why of Model Driven Programmability
Introducing YANG Data Modeling for the Network


Exam overview
4.0 Application Deployment and Security
4.1 Diagnose a CI/CD pipeline failure (such as missing dependency, incompatible versions of components, and failed tests)
4.2 Integrate an application into a prebuilt CD environment leveraging Docker and Kubernetes
4.3 Describe the benefits of continuous testing and static code analysis in a CI pipeline
4.4 Utilize Docker to containerize an application
4.5 Describe the tenets of the "12-factor app"
4.6 Describe an effective logging strategy for an application
4.7 Explain data privacy concerns related to storage and transmission of data
4.8 Identify the secret storage approach relevant to a given scenario
4.9 Configure application specific SSL certificates
4.10 Implement mitigation strategies for OWASP threats (such as XSS, CSRF, and SQL injection)
4.11 Describe how end-to-end encryption principles apply to APIs

Study Material
Introducing Containers
Docker 101
Microservices overview


Exam overview
5.0 Infrastructure and Automation
5.1 Explain considerations of model-driven telemetry (including data consumption and data storage)
5.2 Utilize RESTCONF to configure a network device including interfaces, static routes, and VLANs (IOS XE only)
5.3 Construct a workflow to configure network parameters with:
5.3.a Ansible playbook
5.3.b Puppet manifest
5.4 Identify a configuration management solution to achieve technical and business requirements
5.5 Describe how to host an application on a network device (including Catalyst 9000 and Cisco IOx-enabled devices)

Study Material
Introduction to Meraki integrations
Using the Meraki Dashboard API with postman
Meraki location scanning API Python
A hands-on introduction to the Cisco Container Platform v3.1
Advanced Docker features
Building an IOx Application with Docker
Introduction to Ansible
Managing Cisco Compute with Ansible
Microservices overview



================

HTTP Verb	Typical Action (CRUD)
POST		Create
GET			Read
PUT			Update
PATCH		Update
DELETE		Delete

Status Code	Status Message	Meaning
200	OK	All looks good
201	Created	New resource created
400	Bad Request	Request was invalid
401	Unauthorized	Authentication missing or incorrect
403	Forbidden	Request was understood but not allowed
404	Not Found	Resource not found
500	Internal Server Error	Something wrong with the server
503	Service Unavailable	Server is unable to complete request


curl -X		followed by a request verb such as GET, PUT, POST, PATCH, or DELETE.
curl -H 	followed by a header such as a token to send with the requests.


curl https://deckofcardsapi.com/api/deck/new/ | python -m json.tool
curl https://deckofcardsapi.com/api/deck/new/ | python3 -m json.tool

curl https://deckofcardsapi.com/api/deck/i5esttp06r1z/shuffle/
curl https://deckofcardsapi.com/api/deck/i5esttp06r1z/draw/?count=3 | python -m json.tool


curl https://api.ciscospark.com/v1/people/me

curl https://api.ciscospark.com/v1/messages -X POST -H "Authorization:Bearer NDc0OWI3NWMtNjc3ZS00ZDM4LWE3MzktNWYyYmMxYWY2YjIxMWQ0ZjI5ZjAtM2Yz_PF84_e1a492ed-2b3b-4ab5-b37e-e7a31a6a4d57" --data "toPersonEmail=ericbrouwers@home.nl" --data "text=Hi%20from%20DevNet"

curl https://api.ciscospark.com/v1/teams -X GET -H "Authorization:Bearer M2RiZWQyMDItMDdhYi00NTA1LTgwOTQtMjUzMTc4YThhZDI4YjU4NmJmNmMtZWQ3_PF84_e1a492ed-2b3b-4ab5-b37e-e7a31a6a4d57"

curl -X GET https://api.ciscospark.com/v1/teams -H "Authorization:Bearer M2RiZWQyMDItMDdhYi00NTA1LTgwOTQtMjUzMTc4YThhZDI4YjU4NmJmNmMtZWQ3_PF84_e1a492ed-2b3b-4ab5-b37e-e7a31a6a4d57"

