Learn Pharo
-----------
http://pharo.org
http://pharo.org/documentation
https://pharoweekly.wordpress.com/

ProfStef go.
ProfStef next.
ProfStef previous.

Massive Open Online Course	http://mooc.pharo.org
Pharo Books									http://books.pharo.org
Updated Pharo by Example		https://github.com/SquareBracketAssociates/UpdatedPharoByExample
Screencasts									https://www.youtube.com/channel/UCp3mNigANqkesFzdm058bvw
Presentations								http://www.slideshare.net/pharoproject/


Comments
--------
"This is a comment in Pharo Smalltalk"


Messages, selectors
-------------------
Unary messages are executed first, then binary messages and finally keyword messages:
 Unary > Binary > Keywords

	2 + 3 squared.
	2 raisedTo: 3 + 2.

Between messages of similar precedence, expressions are executed from left to right:
	-3 abs negated reciprocal.


Use parentheses to change order of evaluation
	(2 + 3) squared.
	(2 raisedTo: 3) + 2.


Traditional precedence rules from mathematics do not apply in Pharo.
Remember that all messages always follow a simple left-to-right precedence rule.
	2 * 10 + 2.
	2 + 2 * 10.
	2 + (2 * 10).



Classes
-------
Classes are defined by sending the message subclass: to the class Object.
Class names start with uppercase.

Object subclass: #Counter
 instanceVariableNames: 'count'

Object subclass: #Point
 instanceVariableNames: 'x y'



Variables
---------
Lowercase are used for local/private/temporary variables.
Uppercase are used for shared or global variables.

Local variables start with lowercase (temporary variables, instance variables, arguments,...).

	CounterTest >> testIncrement
	 |c|
	 c := Counter new.
	 ...


Shared or global variables start with uppercase (class, class variables).

	Object is a class globally accessible:
	 Object subclass: #Point

	Transcript is an object that is globally accessible (a kind of stdout):
	 Transcript cr.
	 Transcript show: 'hello world'.



ClassVariables are shared variables. To share information between all the instances of a class and subclasses use a classVariable:

	Object subclass: #CombinedChar
	 instanceVariableNames: 'codes combined'
	 classVariableNames: 'Compositions Decompositions Diacriticals'
	 package: 'Kernel−BasicObjects'


Special variables cannot be changed: true, false, nil self, super, thisContext
	- true, false are the Booleans
		- true is the unique instance of the class True
		- false is the unique instance of the class False

 	- nil is a global and special variable that refers to the only instance of class UndefinedObject.
	- nil is the unique instance of the class UndefinedObject

	- self refers to the receiver of the message (this in Java).
	- super refers to the receiver but the method lookup starts in the superclass of the class defining the method.

	- thisContext refers to the current execution stack (advanced)



System info
-----------
SmalltalkImage current aboutThisSystem.
SystemVersion current.


Date and Time
-------------
Date today.
Date yesterday.
Date today + 3 weeks.
Date today < Date yesterday.

Time now.
DateAndTime today.


Console Output
--------------
Transcript open.
Transcript show: 'Hello '.
Transcript show: 'Pharo'.
Transcript cr.
Transcript clear


; is the cascade operator. It's useful to send message to the same receiver.

	Transcript
		   show: 'Hello ';
		   show: 'Pharo';
		   cr.


Separator
---------
. is a Separator (not a terminator)


Booleans, Conditions
--------------------
true is the unique instance of class True
false is the unique instance of class False

& | not
or: and: 			"lazy evaluation"
xor:
ifTrue:ifFalse:
ifFalse:ifTrue: ...


true
false
false not.
true | false.
true & false.

true or: false.
true and: false.

3 < 10
	ifTrue: [Transcript show: 'Indeed, 3 is less than 10'].

myProtocol
  ifEmpty: [ 'As yet unclassified' ]

self listItems
  ifNotEmpty: [ :aList | aList at: index ]

Notice that when the receiver is not empty we get it as argument (no need to ask it again).


Loops
-----
Loops are high-level collection iterators, implemented as regular methods. Some loops:
  to:do:
  to:by:do:
  timesRepeat:

1 to: 100 do: [:i | Transcript show: i asString; cr].
1 to: 100 by: 3 do: [:i | Transcript show: i asString; cr].
100 to: 0 by: -2 do: [:i | Transcript show: i asString; cr].

3 timesRepeat: [Transcript show: 'Yes yes';cr]


whileTrue:
whileFalse:


Numbers, Floats
---------------
1 class.
1 class maxVal.

1/3.
1/3 class.
1/3) asFloat.
(1/3) + (4/5).

Float pi.

9 squared.
5 between: 4 and: 6
1 max: 3.

1 odd.
2 even.
-3 abs.
3 negated.
3 reciprocal.


5 factorial
	/ 4 factorial 
		+1

Integer primesUpTo: 14
(Integer primesUpTo: 14) sum


Characters
----------
A Character is instantiated using $ operator.
	$A.
	$A class.
	$B charCode.
	Character cr.
	Character space.

Print all 256 characters of the ASCII extended set:
	Character allByteCharacters.


Strings
-------
A String is a collection of characters. Use single quotes to create a String object.

	'ProfStef'.
	'ProfStef' size.
	'abc' asUppercase.
	'abc' asLowercase.
	'Hello World' reverse.

You can access each character using at: message.
Index starts at 1, not at 0.
	'ProfStef' at: 1.

String concatenation uses the comma operator:
	'ProfStef', ' is cool'.


$- split: '1969-07-20'
Character space split: 'A Symbol is a String which is guaranteed to be globally unique'

$/ join: ($- split: '1969-07-20') reverse

Character space join: #('This' 'is' 'crazy')
$_ join: #('This' 'is' 'crazy')



Symbols
-------
A Symbol is a String which is guaranteed to be globally unique.
There is one and only one Symbol #ProfStef. There may be several 'ProfStef' String objects.
(Message == returns true if the two objects are the SAME).

'ProfStef' asSymbol.
#ProfStef asString.
(2 asString) == (2 asString).
(2 asString) asSymbol == (2 asString) asSymbol.
(Smalltalk globals at: #ProfStef ProfStef) next.


Arrays
------
Arrays start at 1, not 0.

Literal arrays are created at parse time:
	#(1 2 3).
	#(1 2 3 #(4 5 6)) size.
	#(1 2 4) isEmpty.
	#(1 2 3) first.
	#(1 2 3) last.
	#(1 2 3) at: 3.
	#('hello' 'World') at: 2 put: 'Pharo'; yourself.

Dynamic Arrays are created at execution time:
	{ (2+3) . (6*6) }.
	{ (2+3) . (6*6) . 'hello', ' Stef'}



Collections
-----------
OrderedCollection new
  add: 56;
  add: 33;
  yourself.


Set newFrom: {1. 2. 3}
{1. 2. 3} as: Set


#(a b c d e f) asSet intersection: #(f d b) asSet


Associations
------------
An Association defines a key/value pair:
	'name' -> 'John'

Teapot configure: { #defaultOutput −> #json. #port −> 8181 . #debugMode −> true }.


Dictionaries
------------




Blocks (closures)
-----------------
Blocks are anonymous methods that can be stored into variables and executed on demand.
Blocks are delimited by square brackets: [].
Blocks are executed when they are evaluated.
Block execution returns the value of the last expression.
Blocks may contain temporary variables.
Use blocks with 2 or 3 arguments maximum.
A block encapsulates only one computation.

[:x | x * x ] value:12.
[:x :y | x + y] value:3 value:5.
[GTPlayground open] value.
[ProfStef next] value.

|b|
b := [:x | x+2].
b value: 12.


( ) vs. [ ]:
- ( ) just changes the priority of an execution but the program is executed
- [ ] blocks program execution: the program is NOT executed
- ( ) is about changing the order of a computation
- [ ] is freezing the computation and controlling it


Use [ expressions ] when:
- expressions may not be executed at all (if, and, ...)
- expressions may be executed multiple times (while, ...)



Iterators
---------
The message do: is sent to a collection of objects (Array, Set, OrderedCollection), evaluating the block for each element.

#(11 38 3 -2 10) collect: [:each | each abs].
#(11 38 3 -2 10) collect: [:each | each odd].

#(11 38 3 -2 10) select: [:each | each odd].
#(11 38 3 -2 10) select: [:each | each > 10].

#(11 38 3 -2 10) reject: [:each | each > 10].


(1914 to: 1945) select: [:each | Year isLeapYear: each].
(1914 to: 1945) count: [:each | Year isLeapYear: each].


#(11 38 3 -2 10) do: [:each |
     Transcript show: each printString; cr].

#(11 38 3 -2 10)
     do: [:each | Transcript show: each printString]
     separatedBy: [Transcript show: '.'].


#(a b c d e f) includesAll: #(f d b)


collect: 				(iterate and collect results)
select: 				(select matching elements)
reject: 				(reject matching elements)
detect: 				(get first element matching)
detect:ifNone: 	(get first element matching or a default value)
includes: 			(test inclusion)



Instances
---------
Objects are instances of their class. Usually, we send the message #new to a class for creating an instance of this class.

	SimpleButtonMorph new
		label: 'A nice button';
		openCenteredInWorld.


The message #allInstances sent to a class answers an Array with all instances of this class.

	SimpleButtonMorph allInstances size.


	SimpleButtonMorph allInstances last
		label: 'ProfStef is cooooool !';
		color: Color red.

Delete it and ask the system to clean the memory:

	SimpleButtonMorph allInstances last delete.
	Smalltalk garbageCollect.
	SimpleButtonMorph allInstances size.


Click on the button to go to next lesson:

	SimpleButtonMorph new
		label: 'Go to next lesson';
		target: [ProfStef next.
				   SimpleButtonMorph allInstances last delete];
		actionSelector: #value;
		openCenteredInWorld.


Reflection
----------
(Number>>#abs) definition.
(Number>>#abs) comment.
Number selectors.
Number selectors select: #isUnary.
Number respondsTo: #isNumber.

(True>>#ifTrue:) definition.
(True>>#ifTrue:) comment.
True selectors.

Date today inspect.
Date browse.


yourself
--------
|s|
s := Set new.
s add: 2.
s

Equivalent to:

Set new
  add:2;
  yourself


	Note: The method add: returns its argument, not the receiver.
	  Set new add: 2
	  >2
	We get 2 and not the set!


The cascade returns the value of the last message sent to the object. When creating a new object, after sending several messages to configure it with a cascade, yourself is the simplest way to get the new object as a result of the whole expression.



Thread
------
# java: new Thread (() -> this.doSomething()).start();

[self doSomething] fork



Zinc, Teapot
------------
Zinc is a HTTP client/server.


"Get a book"
ZnClient new
 url: 'http://localhost:8181/books/1';
 get


"Add a book"
ZnClient
 new url: 'http://localhost:8181/books/1';
 formAt: 'author' put: 'van Caekenberghe et al';
 formAt: 'title' put: 'Entreprise Pharo';
 post



Teapot
------
Teapot is micro web framework for Pharo Smalltalk on top of the Zinc HTTP components
Teapot	https://github.com/zeroflag/Teapot


Simple HTTP server running on default (?) port 1701 with one route (for welcome):

	Teapot on
	    GET: '/welcome' -> 'Hello World!';
	    start.

Do it and view it at: http://localhost:1701/welcome


	Sending message on to class Teapot returns an object.
	The message GET: is sent to this object to configure a new route.
	Normally, the first letter of a method name (and corresponding message) should be lower case, that's the recommended naming scheme. In this case, the author of Teapot decided to ignore this scheme to better reflect the HTTP protocol where verbs (such as GET, POST, PUT and DELETE) are typically written uppercased.


---

"The Teapot HTTP server"
books := Dictionary new.
teapot := Teapot configure: { #defaultOutput −> #json. #port −> 8181 }.
teapot
 GET: '/' −> '<h1>A simple book server</h1>';output: #html;
 GET: '/books' −> books;
 GET: '/books/<id:IsInteger>' −> [ :request | books at: (request at: #id) asString];
 POST: '/books/<id>' −> [ :request | | book | book := { 'author' −> (request at: #author). 'title' −> (request at: #title) } asDictionary. books at: (request at: #id) put: book ];
 start.


Tealight
--------
https://github.com/astares/Tealight

Tealight is a project defining a few extensions to the Teapot framework to make the (tea) time you spend with the Pharo Teapot system even easier.


+++++

5 -> 3

Object subclass: #TBPost
	instanceVariableNames: 'title text date category visible'
	classVariableNames: ''
	package: 'TinyBlog'

Object subclass: #TBPost
	slots: { #title. #text. #date. #category. #visible }
	classVariables: {  }
	package: 'TinyBlog'


initialize
	super initialize.
	self date: Date today.
	self category: (self class unclassifiedTag).
	self notVisible.



title: aTitle text: aText
	^ self new
			title: aTitle;
			text: aText;
			yourself


TBPost new.
TBPost title: 'First post' text: 'My first post' category: 'Pharo'



'http://www.pharo.org' asUrl retrieveContents.


| url |.
url := 'http://pharo.org/web/files/pharo.png'.
(ZnEasy getPng: url) asMorph openInWorld.
(ZnEasy getPng: url) asMorph openInWindow


| anEmail md5Email url |.
anEmail := 'Stephane.Ducasse@inria.fr' asLowercase.
md5Email := (MD5 new hashMessage: anEmail) hex.
url := 'http://www.gravatar.com/avatar/' , md5Email , '.jpg'.
(ZnEasy getJpeg: url) asMorph openInWorld.


Abstract Base Class:
method
	self subclassResponsibility

---

MenubarMorph reset.


A Point:
	10 @ 100.


Color red
Color r:1 g:0 b:0.

'Hello World' asMorph openInWindow .


Open a playground:
	GTPlayground open.
	Workspace open.


-----


MOOC
----
Done:
1, 2

Todo:
2.14.3.[Mini-projet] Chap.3 TinyBlog: Extending and Testing the Model