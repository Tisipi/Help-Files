
Print LSB (Linux Standard Base) and Distribution information.

lsb_release -a


python --version
python -V
python2 --version
python3 --version


shebang line examples
#!/usr/bin/env python3
#!/usr/bin/python


Ubuntu:
ls /usr/lib/python3.8/dist-packages
Manjaro:
ls /usr/lib/python3.8


__init__.py



Python 3 Module of the Week
---------------------------
https://pymotw.com/3/



Basic I/O
---------
print("Hello")
print("Hello {}".format(name))

name = input("Please type your name: ")


Remark
- In Python 2 raw_input should be used to input a string
- input(x) is eval(raw_input(x)).


# Linux env variables
env
env | grep PATH
echo $PATH
export TEST_VAR="Yes Yes"

os.environ["PATH"]
os.environ.get("PATH")
os.environ.get("PATH", "")

my_env = os.environ.copy()
my_env['PATH'] = os.pathsep.join(["/opt/niceapp", my_env['PATH']])


sys.exit(0)		default exit code python script
sys.exit(1)		exit code error


sys
---
import sys
sys.argv

sys.argv[0], sys.argv[1], etc.

sys.stdin



subprocess
----------
https://docs.python.org/3/library/subprocess.html

subprocess.run(["ls"])
subprocess.run(["ps"])
subprocess.run(["date"])
subprocess.run(["sleep", "5"])
subprocess.run(["ping", "8.8.8.8"])

result = subprocess.run(["ls"])
result.returncode

result = subprocess.run(["ls"], capture_output=True)
result.stdout
result.stdout.decode().split('\n')
result.stderr


Misc
----
split()
strip()
word.lower()
word.isalpha()
replace()

punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
new_file_contents = ''.join(char for char in file_contents if char not in punctuations)


department_list.count("IT")



read /write files
-----------------
file = open('test.txt')
file.close()

with open('test.txt') as file:
    for line in file:
        print(line.strip())

line = file.readline()
next_line = file.readline()
rest_of_file = file.read()

lines = file.readlines()


modes:
'r'	open for reading (default)
'w'	open for writing, truncating the file first !!!
'x'	open for exclusive creation, failing if the file already exists
'a'	open for writing, appending to the end of the file if it exists
'b'	binary mode
't'	text mode (default)
'+'	open for updating (reading and writing)


os
--
https://docs.python.org/3/library/os.html
https://docs.python.org/3/library/os.path.html

os.getcwd()
os.mkdir('temp_dir')
os.chdir('temp_dir')
os.rmdir('temp_dir')
os.listdir('/')
os.listdir(path='.')

os.scandir(path='.')
	Returns an iterator

	Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information


	with os.scandir(path) as it:
	    for entry in it:
	        if not entry.name.startswith('.') and entry.is_file():
	            print(entry.name)


os.remove('my.txt')
os.rename('draft.txt', 'final.txt')
os.path.exists('draft.txt')

os.path.abspath('test_math.py')
os.path.isfile(file)
os.path.isdir(file)
os.path.join(dir, name)
os.path.dirname(path)
os.path.expanduser('~')

os.stat('somefile.txt')


# File size in bytes
os.path.getsize('draft.txt')

# Last modified time (unix time)
os.path.getmtime('draft.txt')

# Return the time of last access of path
os.path.getatime(path)


os.environ
os.environ['HOME']
os.environ['PATH']

os.getenv('HOME')
os.getenv('PATH')
os.putenv(key, value)


os.getpid()
os.getppid()
os.uname()

os.sep
os.linesep
os.pathsep


csv
---
https://docs.python.org/3/library/csv.html
https://realpython.com/python-csv/

Note: Files below should be opened with newline=''
		with open('person.csv', newline='') as csvfile:


with open('person.csv', 'r') as f:
    csv_file = csv.reader(f)
    for row in csv_file:
        name, gender, age = row

persons = [['Jan', 'Man', 32], ['Piet', 'Man' ,45], ['Joke' ,'Vrouw', 34]]
with open('my_persons.csv', 'w') as f:
    csv_file = csv.writer(f)
    csv_file.writerows(persons)


with open('personHeader.csv', 'r') as f:
    csv_file = csv.DictReader(f)
    for row in csv_file:
        print(row['Name'], row['Age'])


persons = [{'Name': 'Jan', 'Gender': 'Man', 'Age': 27},
           {'Name': 'Piet', 'Gender': 'Man' ,'Age': 45},
           {'Name': 'Joke' ,'Gender': 'Vrouw', 'Age':34}]
with open('my_persons_header.csv', 'w') as f:
    keys = ['Name', 'Gender', 'Age']
    csv_file = csv.DictWriter(f, fieldnames=keys)
    csv_file.writeheader()
    csv_file.writerows(persons)


csv.register_dialect('myDialect', skipinitialspace=True, strict=True)
csv.DictReader(f, dialect = 'myDialect')



math
----
math.pi


datetime
--------
unixtime = os.path.getmtime('test_math.py')
datetime.datetime.fromtimestamp(unixtime)
#datetime.datetime(2020, 10, 9, 17, 30, 52, 145723)


shutil
------
du = shutil.disk_usage("/")
du.free / du.total
du.used / du.total


psutil
------
psutil.cpu_percent(0.1)


requests
--------
# sudo apt install python3-requests
request = requests.get("http://www.google.com")
request.status_code == 200


socket
------
localhost = socket.gethostbyname('localhost') # Returns '127.0.0.1'


re
--
https://www.regex101.com
https://regexcrossword.com/
https://docs.python.org/3/howto/regex.html
https://docs.python.org/3/library/re.html

Metacharacters: . ^ $ * + ? { } [ ] \ | ( )
Metacharacters must be escaped.

.		Any char except a newline character (in alternate mode (re.DOTALL) it matches even a newline)
?		Optional char (0 or 1 char)
*		0 or more instances
+		1 or more instances
^		Matches at the beginning of string/line (re.MULTILINE flag)
$		Matches at the end of a string/line
[]		Character class (a set of characters). For example:
			[a-z]
			[A-Z]
			[0-9]
			[a-zA-Z]
			[^a-zA-Z]
			[a-zA-Z0-9]
			[\s,.] 		match any whitespace character or ',' or '.'.

|		Alternation, “or” operator, e.g. [man|woman]
{n}		Repetition, n times
{n,m}	Repetition, n to m times (incl.)
{n,}	Repetition, n or more times
{,m}	Repetition, zero up to m times.


\d		Matches any decimal digit; this is equivalent to the class [0-9].
\D		Matches any non-digit character; this is equivalent to the class [^0-9].
\s		Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S		Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
\w		Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W		Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].

\b		Word boundary. Matches only at the beginning or end of a word.


match()		Determine if the RE matches at the beginning of the string.
search()	Scan through a string, looking for any location where this RE matches.
findall()	Find all substrings where the RE matches, and returns them as a list.
finditer()	Find all substrings where the RE matches, and returns them as an iterator.

split()		Split the string into a list, splitting it wherever the RE matches.
sub()		Find all substrings where the RE matches, and replace them with a different string.
subn()		Does the same thing as sub(), but returns the new string and the number of replacements.


re.search(r"man", "mankind")
re.search(r"man", "Mankind", re.IGNORECASE)
re.search(r"\.nl", "tisipi.nl")

re.findall(r"man|woman", "Both man and woman")

pattern = re.compile(r"man|woman")
pattern.findall("Both man and woman")

mo = re.search(r"\[(\d+)\]", "This is a PID [1234] maestro")
mo.group()
mo.group(0)
mo.groups()


result = re.search(r" () () ", <string>)
result[1]
result[2]


re.split(r"[.!]", "Split my sentence. This one too! Is it working?")
re.split(r"([.!])", "Split my sentence. This one too! Is it working?")

p = re.compile('(blue|white|red)')
p.sub('colour', 'blue socks and red shoes')
p.sub('colour', 'blue socks and red shoes', count=1)

re.sub(r"\d+.\d+.\d+.\d+", "[HIDDEN]", "The customers IP address 11.6.6.7 must not be visible")


unittest
--------
https://docs.python.org/3/library/unittest.html#basic-example
https://docs.python.org/3/library/unittest.html#command-line-interface
https://docs.python.org/3/library/unittest.html#organizing-test-code
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises


Create module called <module>_test.py:

	import unittest

	# Test Class
	class TestWhatever(unittest.TestCase):

		# Test methods
	    def setUp(self):
	        self.widget = Widget('The widget')

	    def tearDown(self):
	        self.widget.dispose()

	    def test_whatever1(self):
	    	self.assertEqual(..., ...)

	    def test_whatever2(self):

	if __name__ == '__main__':
	    unittest.main()


assertEqual(a, b)			a == b
assertNotEqual(a, b)		a != b
assertTrue(x)				bool(x) is True
assertFalse(x)				bool(x) is False
assertIs(a, b)				a is b
assertIsNot(a, b)			a is not b
assertIsNone(x)				x is None
assertIsNotNone(x)			x is not None
assertIn(a, b)				a in b
assertNotIn(a, b)			a not in b
assertIsInstance(a, b)		isinstance(a, b)
assertNotIsInstance(a, b)	not isinstance(a, b)

assertRaises(exc, fun, *args, **kwds)			fun(*args, **kwds) raises exc
assertRaisesRegex(exc, r, fun, *args, **kwds)	fun(*args, **kwds) raises exc and the message matches regex r
assertWarns(warn, fun, *args, **kwds)			fun(*args, **kwds) raises warn
assertWarnsRegex(warn, r, fun, *args, **kwds)	fun(*args, **kwds) raises warn and the message matches regex r
assertLogs(logger, level)						The with block logs on logger with minimum level

assertAlmostEqual(a, b)		round(a-b, 7) == 0
assertNotAlmostEqual(a, b)	round(a-b, 7) != 0
assertGreater(a, b)			a > b
assertGreaterEqual(a, b)	a >= b
assertLess(a, b)			a < b
assertLessEqual(a, b)		a <= b
assertRegex(s, r)			r.search(s)
assertNotRegex(s, r)		not r.search(s)
assertCountEqual(a, b)		a and b have the same elements in the same number, regardless of their order.

assertMultiLineEqual(a, b)	strings
assertSequenceEqual(a, b)	sequences
assertListEqual(a, b)		lists
assertTupleEqual(a, b)		tuples
assertSetEqual(a, b)		sets or frozensets
assertDictEqual(a, b)		dicts


assert isinstance(item, str), "Must be a string"


Command line examples:
	python -m unittest -h
	python -m unittest test_module
	python -m unittest -v test_module
	python -m unittest test_module1 test_module2
	python -m unittest test_module.TestClass
	python -m unittest test_module.TestClass.test_method


Exceptions
----------
raise ValueError
raise NameError('This is an error')


Built-in Exception hierarchy:

	BaseException
	 +-- SystemExit
	 +-- KeyboardInterrupt
	 +-- GeneratorExit
	 +-- Exception
	      +-- StopIteration
	      +-- StopAsyncIteration
	      +-- ArithmeticError
	      |    +-- FloatingPointError
	      |    +-- OverflowError
	      |    +-- ZeroDivisionError
	      +-- AssertionError
	      +-- AttributeError
	      +-- BufferError
	      +-- EOFError
	      +-- ImportError
	      |    +-- ModuleNotFoundError
	      +-- LookupError
	      |    +-- IndexError
	      |    +-- KeyError
	      +-- MemoryError
	      +-- NameError
	      |    +-- UnboundLocalError
	      +-- OSError
	      |    +-- BlockingIOError
	      |    +-- ChildProcessError
	      |    +-- ConnectionError
	      |    |    +-- BrokenPipeError
	      |    |    +-- ConnectionAbortedError
	      |    |    +-- ConnectionRefusedError
	      |    |    +-- ConnectionResetError
	      |    +-- FileExistsError
	      |    +-- FileNotFoundError
	      |    +-- InterruptedError
	      |    +-- IsADirectoryError
	      |    +-- NotADirectoryError
	      |    +-- PermissionError
	      |    +-- ProcessLookupError
	      |    +-- TimeoutError
	      +-- ReferenceError
	      +-- RuntimeError
	      |    +-- NotImplementedError
	      |    +-- RecursionError
	      +-- SyntaxError
	      |    +-- IndentationError
	      |         +-- TabError
	      +-- SystemError
	      +-- TypeError
	      +-- ValueError
	      |    +-- UnicodeError
	      |         +-- UnicodeDecodeError
	      |         +-- UnicodeEncodeError
	      |         +-- UnicodeTranslateError
	      +-- Warning
	           +-- DeprecationWarning
	           +-- PendingDeprecationWarning
	           +-- RuntimeWarning
	           +-- SyntaxWarning
	           +-- UserWarning
	           +-- FutureWarning
	           +-- ImportWarning
	           +-- UnicodeWarning
	           +-- BytesWarning
	           +-- ResourceWarning


Python Try Except
-----------------
https://www.w3schools.com/python/python_try_except.asp:

	- The try block lets you test a block of code for errors.
	- The except block lets you handle the error.
	- You can use the else keyword to define a block of code to be executed if no errors were raised
	- The finally block lets you execute code, regardless of the result of the try- and except blocks.


https://realpython.com/python-exceptions/

	- In the try clause, all statements are executed until an exception is encountered.
	- except is used to catch and handle the exception(s) that are encountered in the try clause.
	- else lets you code sections that should run only when no exceptions are encountered in the try clause.
	- finally enables you to execute sections of code that should always run, with or without any previously encountered exceptions.
	- raise allows you to throw an exception at any time.
	- assert enables you to verify if a certain condition is met and throw an exception if it isn’t.

try:
  print(x)
except:
  print("An exception occurred")

try:
    with open('file.log') as file:
        read_data = file.read()
except FileNotFoundError as fnf_error:
    print(fnf_error)


try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")


try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

try:
    linux_interaction()
except AssertionError as error:
    print(error)
else:
    print('Executing the else clause.')


try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")

try:
  f = open("demofile.txt")
  f.write("Lorum Ipsum")
except:
  print("Something went wrong when writing to the file")
finally:
  f.close()



Jupyter Notebooks
-----------------
Jupyter Notebook Tutorial			https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook
How to use Jupyter Notebooks		https://www.codecademy.com/articles/how-to-use-jupyter-notebooks
Teaching and Learning with Jupyter 	https://jupyter4edu.github.io/jupyter-edu-book/


unittest.main(argv = ['ignore-this-dummy-argument'], exit = False)
	unittest.main( ) looks at sys.argv. In Jupyter the first parameter of sys.argv is what started the Jupyter kernel.
	Passing an explicit list to unittest.main( ) prevents it from looking at sys.argv.
	exit = False prevents unittest.main( ) from shutting down the kernel process.


SSH Access with PEM file
------------------------
download PEM key file
chmod 600 <keyfile>.pem
ssh -i <keyfile>.pem username@<IP Address>



Bash Scripting
--------------
Bash = Bourne Again shell (Steve Bourne, Bell Labs Research)

https://ryanstutorials.net/bash-scripting-tutorial/
https://linuxconfig.org/bash-scripting-tutorial-for-beginners
https://www.shellscript.sh
https://wiki.bash-hackers.org/commands/classictest

echo $SHELL


STDIN	0
STDOUT	1
STDERR	2

>	redirect STDOUT output to file
>>	redirect STDOUT output to file (but append, iso overwrite)
2>	redirect STDERR output to file

<	redirect STDIN input from file


cat pluralsight.txt | less
cat pluralsight.txt | tr ' ' '\n'
cat pluralsight.txt | tr ' ' '\n' | sort
cat pluralsight.txt | tr ' ' '\n' | sort | uniq
cat pluralsight.txt | tr ' ' '\n' | sort | uniq -c
cat pluralsight.txt | tr ' ' '\n' | sort | uniq -c | sort -n
cat pluralsight.txt | tr ' ' '\n' | sort | uniq -c | sort -nr
cat pluralsight.txt | tr ' ' '\n' | sort | uniq -c | sort -nr | head


ps ax | grep <search>

ctrl-c	SIGINT 		Terminates process cleanly
ctrl-z	SIGSTOP		Stops process (restart/continue with "fg")

kill <pid>	default is SIGTERM


ps			list processes executing in current terminal for current user
ps ax		list all processes executing for all users
ps e		shows the environment for the processes listed
fg			move stopped or background job to the foreground
bg			move stopped job to the background
jobs		lists jobs currently running or stopped
top			list top CPU processes ("q" to quit)


cd <directory>					Change directory
pwd								Print the current working directory
ls								List current directory
ls <directory>					List directory
ls -l							List long info of current directory
ls -a							List current directory (incl. hidden files)
ls -la
mkdir <directory>				Create/make directory
rmdir <directory>				Remove directory (if empty)
cp <old> <new>      			Copy
mv <old> <new>      			Move
touch <file>					Create an empty file (or update modification time if existing)
chmod <modifiers> <file>		Change permissions
chown <user> <file>				Changes the owner
chgrp <group> <file>			Changes the group

cat  <file>						Shows the content of the file on standard output
wc   <file>						Word Count (characters, words, lines)
file <file>						Print the file type
head <file>						Head of file (first 10 lines)
tail <file>						Tail of file (last 10 lines)
less <file>						Scroll through file ("q" to quit)
sort <file>						Sort the file alphabetically
cut OPTION... [FILE]...			Cut specific fields/character from file

echo "message"					Print message to standard output
date							Print current date
who								Print logged in users
man <command>					Manual pages
uptime							Uptime system
free							Free and used memory


# Status code last Linux command (0 is success/ok)
echo $?


collect.sh:
	#!/bin/bash
	echo "START TIME $(date)"; echo
	echo "YOU ARE $(who)"; echo
	echo "UPTIME IS"; uptime; echo

Variables:
	# Note: no spaces!
	name=Tisipi
	echo $name

Globs like * and ?:
	echo *.sh
	echo c*
	echo P?r*

Read a line from standard input:
	echo What is your name?
	read NAME
	echo "Hello $NAME - How are you?"

Conditional expression:
	#!/bin/bash
	if grep "127.0.0.1" /etc/hosts
	then
		echo "Loopback present"
	else
		echo "No Loopback"
	fi

	#!/bin/bash
	if grep "127.0.0.1" /etc/hosts; then
		echo "Loopback present"
	else
		echo "No Loopback"
	fi


	# https://wiki.bash-hackers.org/commands/classictest
	#
	# Bash test command
	#
	# file exists: test -e

	if test -e /etc/passwd; then
	  echo "Alright man..." >&2
	else
	  echo "Yuck! Where is it??" >&2
	  exit 1
	fi


	# Alternative test command ("[" is a test command too; "]" is an argument)

	if [ -e /etc/passwd ]; then
	  echo "Alright man..." >&2
	else
	  echo "Mmh! Where is it??" >&2
	  exit 1
	fi


	# Test if string is not empty

	if test -n "$PATH" ; then echo "Path is not empty"; fi
	if [ -n "$PATH" ]; then echo "Path is not empty"; fi


File tests:

	-e <FILE>			Tests if <FILE> exists.
	-f <FILE>			Tests if <FILE> exists and is a regular file.
	-d <FILE>			Tests if <FILE> exists and is a directory.
	-S <FILE>			Tests if <FILE> exists and is a socket file.
	-L <FILE>			Tests if <FILE> exists and is a symbolic link.
	-r <FILE>			Tests if <FILE> exists and is readable.
	-w <FILE>			Tests if <FILE> exists and is writable.
	-x <FILE>			Tests if <FILE> exists and is executable.
	-s <FILE>			Tests if <FILE> exists and has size bigger than 0 (not empty).
	<FILE1> -nt <FILE2>	Tests if <FILE1> is newer than <FILE2> (mtime).
	<FILE1> -ot <FILE2>	Tests if <FILE1> is older than <FILE2> (mtime).


String tests:

	-z <STRING>				Tests if <STRING> is empty.
	-n <STRING>				Tests if <STRING> is not empty (default operation).
	<STRING1> = <STRING2>	Tests if strings are equal.
	<STRING1> != <STRING2>	Tests if strings are not equal.
	<STRING1> < <STRING2>	Tests if <STRING1> sorts before <STRING2> lexicographically (pure ASCII, not current locale!). Remember to escape! Use \<
	<STRING1> > <STRING2>	Tests if <STRING1> sorts after <STRING2> lexicographically (pure ASCII, not current locale!). Remember to escape! Use \>

Arithmetic tests:

	<INTEGER1> -eq <INTEGER2>	True, if the integers are equal.
	<INTEGER1> -ne <INTEGER2>	True, if the integers are NOT equal.
	<INTEGER1> -le <INTEGER2>	True, if the first integer is less than or equal second one.
	<INTEGER1> -ge <INTEGER2>	True, if the first integer is greater than or equal second one.
	<INTEGER1> -lt <INTEGER2>	True, if the first integer is less than second one.
	<INTEGER1> -gt <INTEGER2>	True, if the first integer is greater than second one.


While loop:
	i=1
	while [ $i -le 10 ]; do
	  echo "$i"
	  ((i+=1))
	done

	operation=$1
	while ! $operation && [ $i -le 10 ]; do
	  ...
	done


For loop:
	for i in 1 2 3 4 5; do
	  echo "$i"
	done

	for name in John Peter Tim Steve; do
	  echo "$name"
	done