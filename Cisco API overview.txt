Cisco API overview
==================


Webex Teams API
---------------
Access Token at bot creation.

Base URI:		https://api.ciscospark.com/v1/
Authentication:	Authorization: Bearer <ACCESS_TOKEN>


	requests.get('https://api.ciscospark.com/v1/messages', headers={'Authorization': 'Bearer ACCESS_TOKEN')

	curl -X GET https://api.ciscospark.com/v1/messages -H "Authorization:Bearer <ACCESS_TOKEN>"


	base_url = 'https://api.ciscospark.com/v1/'

	headers = {
	    "Authorization": f"Bearer {api_key}",
	    "Content-Type": "application/json"
	}

	bot_id = requests.get(f'{base_url}/people/me', headers=headers).json().get('id')


	received_message_url = f'{base_url}/messages/{message_id}'
	message_text = requests.get(received_message_url, headers=headers).json().get('text')


	data = {
	    "roomId": room_id,
	    "text": message,
	    }
	post_message_url = f'{base_url}/messages'
	post_message = requests.post(post_message_url,headers=headers,data=json.dumps(data))


	webhooks_url = f'{base_url}/webhooks'
	webhooks = requests.get(webhooks_url, headers=headers).json()['items']
    for webhook in webhooks:
        print(webhook['targetUrl'])

    data = {
        "name": "Webhook to MyChatBot",
        "resource": "all",
        "event": "all",
        "targetUrl": "https://my.apigateway/events"
    }
    webhook = requests.post(webhooks_url, headers=headers, data=json.dumps(data))



Meraki Dashboard API
--------------------
API key is generated when enabling API in dashboard.

Base URI:		https://api.meraki.com/api/v0
Authentication:	X-Cisco-Meraki-API-Key: <secret key>

The API returns 404 (rather than a 403) in response to a request with a missing or incorrect API key.


	requests.get('https://api.meraki.com/api/v0', headers={'X-Cisco-Meraki-API-Key': 'MERAKI-API-KEY'})

	curl -X GET \
	  --url 'https://api.meraki.com/api/v0/networks/networkId3/ssids/number2' \
	  -H 'X-Cisco-Meraki-API-Key: MERAKI-API-KEY'\
	  -H 'Accept: application/json'


	GET {{baseUrl}}/organizations
	GET {{baseUrl}}/organizations/{{organizationId}}
	GET {{baseUrl}}/organizations/{{organizationId}}/networks
	GET {{baseUrl}}/networks/{{networkId}}
	GET {{baseUrl}}/networks/{{networkId}}/vlans
	GET {{baseUrl}}/networks/{{networkId}}/staticRoutes
	GET {{baseUrl}}/networks/{{networkId}}/devices
	GET {{baseUrl}}/networks/{{networkId}}/ssids



Meraki Location Scanning API
----------------------------
Authentication secret for POST server is specified when configuring the post URL.
The validator string is generated by the Meraki Dashboard.

Meraki cloud and third-party server	POST server:
1. First GET to retrieve validator string
2. Subsequent POSTs uses authentication secret



DNA Center Northbound API, Intent API
-------------------------------------
Base URI: 	<cluster-ip>/dna/intent/api/v1/
Auth. URL:	<cluster-ip>/dna/system/api/v1/auth/token

Authentication:
	1. Get a token using POST (using basic authentication)
	2. X-Auth-Token header in subsequent requests

	POST <cluster-ip>/dna/system/api/v1/auth/token
	with basic authorization header with username and password

	GET <cluster-ip>/dna/intent/api/v1/<object>
	with X-Auth-Token header



FTM
---
Base URI:		https://<hostname>/api/fdm/v2
Auth. URL:		https://<hostname>/api/fdm/v2/fdm/token
Deploy URL:		https://<hostname>/api/fdm/v2/operational/deploy

Authentication:	Oauth 2.0
				Password-Granted Access Token
				To get token: POST https://<hostname>/api/fdm/v2/fdm/token
				Subsequent requests: Authorization: Bearer <ACCESS_TOKEN>



Cisco IOS XE
------------
Base URI:		https://<hostname>:443/restconf/data/native
				https://<hostname>:443/restconf/data/Cisco-IOS-XE-native:native 		<<< Module name is optional
Authentication: Username/Password
				Authorization: Basic ....

RESTCONF URI for config:		/restconf/data/<module name>:interfaces
RESTCONF URI for operations:	/restconf/operations/<module name>:flapinterface 		<<< POST for operations !



UCS
---
XML API

Base URI:		/nuova
Authentication: POST with Username/Password


	HOST = '10.10.10.1'
	USERNAME = 'Adminneke'
	PASSWORD = 'Cisco123'

	http_connection = http.client.HTTPConnection(HOST)

	body = f'<aaaLogin inName="{USERNAME}" inPassword="{PASSWORD}" />'
	connection = http_connection.request('POST', '/nuova', body)

	response = connection.getresponse()
	status = response.status
	if status == 200:
		data = response.read()
		response_xml = xml.etree.ElementTree.fromstring(data)
		cookie = response_xml.attrib['outCookie']




Intersight API
--------------
Requires request signing
KEYFILE

API key ID
Secret key (RSA Private Key)


	from intersight.intersight_api_client import IntersightApiClient
	import intersight.apis.network_element_summary_api as summary_api

	client = IntersightApiClient(
	    host='https://intersight.com/api/v1',
	    private_key='<KEYFILE>',
	    api_key_id='<ID>'
	)
	api = summary_api.NetworkElementSummaryApi(client)
	summary = api.network_element_summaries_get()